import{_ as i,c as o,f as l,a as s,e as a,b as p,d as e,r as c,o as u}from"./app-DivB4HLX.js";const r={};function d(k,n){const t=c("eq");return u(),o("div",null,[n[30]||(n[30]=l(`<h1 id="_06图" tabindex="-1"><a class="header-anchor" href="#_06图"><span>06图</span></a></h1><h2 id="_1-定义与基本概念" tabindex="-1"><a class="header-anchor" href="#_1-定义与基本概念"><span>1. 定义与基本概念</span></a></h2><ul><li><strong>无向图</strong>：边是顶点的无序对，即边没有方向性。</li><li><strong>有向图</strong>：其边是顶点的有序对，即边有方向性。</li><li><strong>连通分量</strong>：无向图中的<strong>极大</strong>连通子图。</li><li><strong>连通图</strong>：如果对于无向图 G 中任意两个顶点都是连通的，则称 G 是连通图。</li><li><strong>强连通分量</strong>：有向图中的<strong>极大</strong>强连通子图称作有向图的强连通分量。</li><li><strong>生成树</strong>：一个连通图 G 的一个包含所有顶点的<strong>极小</strong>连通子图 T 是包含 G 的所有顶点 n 个，T 为连通子图，T 包含的边数最少。则 T 是一棵有 n 个顶点，n-1 条边的生成树。</li></ul><h2 id="_2-存储结构" tabindex="-1"><a class="header-anchor" href="#_2-存储结构"><span>2. 存储结构</span></a></h2><h3 id="_2-1-顺序存储" tabindex="-1"><a class="header-anchor" href="#_2-1-顺序存储"><span>2.1 顺序存储</span></a></h3><p><strong>邻接矩阵</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-2-链式存储" tabindex="-1"><a class="header-anchor" href="#_2-2-链式存储"><span>2.2 链式存储</span></a></h3><p><strong>邻接表</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">graph <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span></span>
<span class="line">graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>u<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-遍历" tabindex="-1"><a class="header-anchor" href="#_3-遍历"><span>3. 遍历</span></a></h2><h3 id="_3-1-深度优先-dfs" tabindex="-1"><a class="header-anchor" href="#_3-1-深度优先-dfs"><span>3.1 深度优先 DFS</span></a></h3><p><strong>递归实现</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">visited <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">for</span> u <span class="token keyword">in</span> graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">if</span> u <span class="token keyword">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span></span>
<span class="line">			dfs<span class="token punctuation">(</span>u<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>栈实现</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	visited <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	stack <span class="token operator">=</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">while</span> stack<span class="token punctuation">:</span></span>
<span class="line">		v <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">if</span> v <span class="token keyword">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span></span>
<span class="line">			visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">			<span class="token keyword">for</span> u <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">				<span class="token keyword">if</span> u <span class="token keyword">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span></span>
<span class="line">					stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>u<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-广度优先-bfs" tabindex="-1"><a class="header-anchor" href="#_3-2-广度优先-bfs"><span>3.2 广度优先 BFS</span></a></h3><p><strong>队列实现</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	visited <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">	visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>start<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">while</span> queue<span class="token punctuation">:</span></span>
<span class="line">		v <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">		<span class="token keyword">for</span> u <span class="token keyword">in</span> graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">			<span class="token keyword">if</span> u <span class="token keyword">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span></span>
<span class="line">				visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u<span class="token punctuation">)</span></span>
<span class="line">				queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>u<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-连通性问题" tabindex="-1"><a class="header-anchor" href="#_4-连通性问题"><span>4. 连通性问题</span></a></h2><h3 id="_4-1-prim-算法" tabindex="-1"><a class="header-anchor" href="#_4-1-prim-算法"><span>4.1 Prim 算法</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">prim</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	visited <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">	total_weight <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">while</span> heap<span class="token punctuation">:</span></span>
<span class="line">		weight<span class="token punctuation">,</span> u <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">if</span> u <span class="token keyword">in</span> visited<span class="token punctuation">:</span></span>
<span class="line">			<span class="token keyword">continue</span></span>
<span class="line"></span>
<span class="line">		visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u<span class="token punctuation">)</span></span>
<span class="line">		total_weight <span class="token operator">+=</span> weight</span>
<span class="line"></span>
<span class="line">		<span class="token keyword">for</span> v<span class="token punctuation">,</span> w <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">			<span class="token keyword">if</span> v <span class="token keyword">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span></span>
<span class="line">				heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token punctuation">(</span>w<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> total_weight</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22)),s("p",null,[n[2]||(n[2]=a("时间复杂度为 ")),p(t,null,{default:e(()=>n[0]||(n[0]=[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"m"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(m\\log n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[a("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])],-1)])),_:1}),n[3]||(n[3]=a("，空间复杂度为 ")),p(t,null,{default:e(()=>n[1]||(n[1]=[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"+"),s("mi",null,"m"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n + m)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mclose"},")")])])],-1)])),_:1}),n[4]||(n[4]=a("。"))]),n[31]||(n[31]=l(`<h3 id="_4-2-kruskal-算法" tabindex="-1"><a class="header-anchor" href="#_4-2-kruskal-算法"><span>4.2 Kruskal 算法</span></a></h3><p>需要使用并查集</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">UnionFind</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		self<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">		self<span class="token punctuation">.</span>rank <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span>par <span class="token operator">:=</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> u<span class="token punctuation">:</span></span>
<span class="line">			self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>par<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">return</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>u<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		root_u <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>u<span class="token punctuation">)</span></span>
<span class="line">		root_v <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>v<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">		<span class="token keyword">if</span> root_u <span class="token operator">!=</span> root_v<span class="token punctuation">:</span></span>
<span class="line">			rank_u <span class="token operator">=</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>root_u<span class="token punctuation">]</span></span>
<span class="line">			rank_v <span class="token operator">=</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>root_v<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">			<span class="token keyword">if</span> rank_u <span class="token operator">&gt;</span> rank_v<span class="token punctuation">:</span></span>
<span class="line">				self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>root_v<span class="token punctuation">]</span> <span class="token operator">=</span> root_u</span>
<span class="line">			<span class="token keyword">elif</span> rank_v <span class="token operator">&gt;</span> rank_u<span class="token punctuation">:</span></span>
<span class="line">				self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>root_u<span class="token punctuation">]</span> <span class="token operator">=</span> root_v</span>
<span class="line">			<span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">				self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>root_v<span class="token punctuation">]</span> <span class="token operator">=</span> root_u</span>
<span class="line">				self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>root_u<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">kruskal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	edges<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">	total_weight <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">	uf <span class="token operator">=</span> UnionFind<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">for</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w <span class="token keyword">in</span> edges<span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">if</span> uf<span class="token punctuation">.</span>find<span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">!=</span> uf<span class="token punctuation">.</span>find<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">			uf<span class="token punctuation">.</span>union<span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line">			total_weight <span class="token operator">+=</span> w</span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> total_weight</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("p",null,[n[7]||(n[7]=a("时间复杂度为 ")),p(t,null,{default:e(()=>n[5]||(n[5]=[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"m"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"m"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(m\\log m)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[a("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mclose"},")")])])],-1)])),_:1}),n[8]||(n[8]=a("，空间复杂度为 ")),p(t,null,{default:e(()=>n[6]||(n[6]=[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"+"),s("mi",null,"m"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n + m)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mclose"},")")])])],-1)])),_:1}),n[9]||(n[9]=a("。"))]),n[32]||(n[32]=l(`<h2 id="_5-有向无环图及其应用" tabindex="-1"><a class="header-anchor" href="#_5-有向无环图及其应用"><span>5. 有向无环图及其应用</span></a></h2><h3 id="_5-1-拓扑排序" tabindex="-1"><a class="header-anchor" href="#_5-1-拓扑排序"><span>5.1 拓扑排序</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">topo_sort</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	indegrees <span class="token operator">=</span> <span class="token punctuation">{</span>node<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token keyword">for</span> node <span class="token keyword">in</span> graph<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">for</span> neighbors <span class="token keyword">in</span> graph<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">for</span> n <span class="token keyword">in</span> neighbors<span class="token punctuation">:</span></span>
<span class="line">			indegrees<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">	queue <span class="token operator">=</span> deque<span class="token punctuation">(</span></span>
<span class="line">		node <span class="token keyword">for</span> node<span class="token punctuation">,</span> indegree <span class="token keyword">in</span> indegrees<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> indegree <span class="token operator">==</span> <span class="token number">0</span></span>
<span class="line">	<span class="token punctuation">)</span></span>
<span class="line">	topo_order <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">while</span> queue<span class="token punctuation">:</span></span>
<span class="line">		node <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">		topo_order<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">		<span class="token keyword">for</span> neighbor <span class="token keyword">in</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">			indegrees<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span></span>
<span class="line">			<span class="token keyword">if</span> indegrees<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">				queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> topo_order</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[12]||(n[12]=a("时间复杂度为 ")),p(t,null,{default:e(()=>n[10]||(n[10]=[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"+"),s("mi",null,"m"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n + m)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mclose"},")")])])],-1)])),_:1}),n[13]||(n[13]=a("，空间复杂度为 ")),p(t,null,{default:e(()=>n[11]||(n[11]=[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"+"),s("mi",null,"m"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n + m)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mclose"},")")])])],-1)])),_:1}),n[14]||(n[14]=a("。"))]),n[33]||(n[33]=l(`<h3 id="_5-2-判断是否有环" tabindex="-1"><a class="header-anchor" href="#_5-2-判断是否有环"><span>5.2 判断是否有环</span></a></h3><p>拓扑排序，判断 <code>len(topo_order) == n</code> 即可。</p><p>或者 DPS：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">has_cycle</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">if</span> state<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">==</span> ON_PATH<span class="token punctuation">:</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">True</span></span>
<span class="line">		<span class="token keyword">if</span> state<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">==</span> VISITED<span class="token punctuation">:</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token boolean">False</span></span>
<span class="line"></span>
<span class="line">		state<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> ON_PATH</span>
<span class="line">		<span class="token keyword">for</span> neighbor <span class="token keyword">in</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">			<span class="token keyword">if</span> dfs<span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">				<span class="token keyword">return</span> <span class="token boolean">True</span></span>
<span class="line">		state<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> VISITED</span>
<span class="line"></span>
<span class="line">		<span class="token keyword">return</span> <span class="token boolean">False</span></span>
<span class="line"></span>
<span class="line">	state <span class="token operator">=</span> <span class="token punctuation">{</span>node<span class="token punctuation">:</span> UNVISITED <span class="token keyword">for</span> node <span class="token keyword">in</span> graph<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">for</span> node <span class="token keyword">in</span> graph<span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">if</span> state<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">==</span> UNVISITED<span class="token punctuation">:</span></span>
<span class="line">			<span class="token keyword">if</span> dfs<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">				<span class="token keyword">return</span> <span class="token boolean">True</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> <span class="token boolean">False</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("p",null,[n[17]||(n[17]=a("时间复杂度为 ")),p(t,null,{default:e(()=>n[15]||(n[15]=[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"+"),s("mi",null,"m"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n + m)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mclose"},")")])])],-1)])),_:1}),n[18]||(n[18]=a("，空间复杂度为 ")),p(t,null,{default:e(()=>n[16]||(n[16]=[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"+"),s("mi",null,"m"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n + m)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mclose"},")")])])],-1)])),_:1}),n[19]||(n[19]=a("。"))]),n[34]||(n[34]=l(`<h2 id="_6-最短路径" tabindex="-1"><a class="header-anchor" href="#_6-最短路径"><span>6. 最短路径</span></a></h2><h3 id="_6-1-dijkstra-算法" tabindex="-1"><a class="header-anchor" href="#_6-1-dijkstra-算法"><span>6.1 Dijkstra 算法</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	distance <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> n</span>
<span class="line">	distance<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">	heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">while</span> heap<span class="token punctuation">:</span></span>
<span class="line">		dist<span class="token punctuation">,</span> u <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">		<span class="token keyword">if</span> dist <span class="token operator">&gt;</span> distance<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">			<span class="token keyword">continue</span></span>
<span class="line"></span>
<span class="line">		<span class="token keyword">for</span> v<span class="token punctuation">,</span> weight <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>new_dist <span class="token operator">:=</span> distance<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> weight<span class="token punctuation">)</span> <span class="token operator">&lt;</span> distance<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">				distance<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> new_dist</span>
<span class="line">				heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> <span class="token punctuation">(</span>v<span class="token punctuation">,</span> new_dist<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> distance</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[22]||(n[22]=a("时间复杂度为 ")),p(t,null,{default:e(()=>n[20]||(n[20]=[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"+"),s("mi",null,"m"),s("mo",{stretchy:"false"},")"),s("mi",null,"log"),s("mo",null,"⁡"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O((n+m)\\log n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"(("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[a("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])],-1)])),_:1}),n[23]||(n[23]=a("，空间复杂度为 ")),p(t,null,{default:e(()=>n[21]||(n[21]=[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"+"),s("mi",null,"m"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n + m)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mclose"},")")])])],-1)])),_:1}),n[24]||(n[24]=a("。"))]),n[35]||(n[35]=l(`<h3 id="_6-2-floyd-算法" tabindex="-1"><a class="header-anchor" href="#_6-2-floyd-算法"><span>6.2 Floyd 算法</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	dist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">for</span> u <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">for</span> v<span class="token punctuation">,</span> weight <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">			dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> weight</span>
<span class="line"></span>
<span class="line">	<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">			<span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">				<span class="token keyword">if</span> <span class="token punctuation">(</span>new_dist <span class="token operator">:=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">					 dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> new_dist</span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> dist</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("p",null,[n[27]||(n[27]=a("时间复杂度为 ")),p(t,null,{default:e(()=>n[25]||(n[25]=[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"3")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n^{3})")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"3")])])])])])])])]),s("span",{class:"mclose"},")")])])],-1)])),_:1}),n[28]||(n[28]=a("，空间复杂度为 ")),p(t,null,{default:e(()=>n[26]||(n[26]=[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(n^{2})")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])]),s("span",{class:"mclose"},")")])])],-1)])),_:1}),n[29]||(n[29]=a("。"))])])}const v=i(r,[["render",d],["__file","06tu.html.vue"]]),h=JSON.parse('{"path":"/series/fuxi/shujujiegou/06tu.html","title":"06图","lang":"zh-CN","frontmatter":{"date":"2025-07-07T00:00:00.000Z"},"headers":[{"level":2,"title":"1. 定义与基本概念","slug":"_1-定义与基本概念","link":"#_1-定义与基本概念","children":[]},{"level":2,"title":"2. 存储结构","slug":"_2-存储结构","link":"#_2-存储结构","children":[{"level":3,"title":"2.1 顺序存储","slug":"_2-1-顺序存储","link":"#_2-1-顺序存储","children":[]},{"level":3,"title":"2.2 链式存储","slug":"_2-2-链式存储","link":"#_2-2-链式存储","children":[]}]},{"level":2,"title":"3. 遍历","slug":"_3-遍历","link":"#_3-遍历","children":[{"level":3,"title":"3.1 深度优先 DFS","slug":"_3-1-深度优先-dfs","link":"#_3-1-深度优先-dfs","children":[]},{"level":3,"title":"3.2 广度优先 BFS","slug":"_3-2-广度优先-bfs","link":"#_3-2-广度优先-bfs","children":[]}]},{"level":2,"title":"4. 连通性问题","slug":"_4-连通性问题","link":"#_4-连通性问题","children":[{"level":3,"title":"4.1 Prim 算法","slug":"_4-1-prim-算法","link":"#_4-1-prim-算法","children":[]},{"level":3,"title":"4.2 Kruskal 算法","slug":"_4-2-kruskal-算法","link":"#_4-2-kruskal-算法","children":[]}]},{"level":2,"title":"5. 有向无环图及其应用","slug":"_5-有向无环图及其应用","link":"#_5-有向无环图及其应用","children":[{"level":3,"title":"5.1 拓扑排序","slug":"_5-1-拓扑排序","link":"#_5-1-拓扑排序","children":[]},{"level":3,"title":"5.2 判断是否有环","slug":"_5-2-判断是否有环","link":"#_5-2-判断是否有环","children":[]}]},{"level":2,"title":"6. 最短路径","slug":"_6-最短路径","link":"#_6-最短路径","children":[{"level":3,"title":"6.1 Dijkstra 算法","slug":"_6-1-dijkstra-算法","link":"#_6-1-dijkstra-算法","children":[]},{"level":3,"title":"6.2 Floyd 算法","slug":"_6-2-floyd-算法","link":"#_6-2-floyd-算法","children":[]}]}],"git":{"createdTime":1752238343000,"updatedTime":1753251899000,"contributors":[{"name":"Dawnfz-Lenfeng","email":"2912706234@qq.com","commits":2}]},"filePathRelative":"series/fuxi/数据结构/06图.md"}');export{v as comp,h as data};
