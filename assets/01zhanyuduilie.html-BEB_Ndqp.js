import{_ as i,c as o,a as s,e as a,b as t,d as p,f as u,r as l,o as r}from"./app-rKlnVmho.js";const k={},d={class:"custom-container theorem"},m={class:"custom-container-content"};function v(h,n){const c=l("eq"),e=l("eqn");return r(),o("div",null,[n[9]||(n[9]=s("h1",{id:"_01栈与队列",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_01栈与队列"},[s("span",null,"01栈与队列")])],-1)),n[10]||(n[10]=s("h2",{id:"_1-栈",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-栈"},[s("span",null,"1. 栈")])],-1)),s("div",d,[n[5]||(n[5]=s("p",{class:"custom-container-title"},"Theorem (出栈顺序)",-1)),s("div",m,[n[4]||(n[4]=s("h1",{id:"",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#"},[s("span")])],-1)),s("p",null,[n[2]||(n[2]=a("给定")),t(c,null,{default:p(()=>n[0]||(n[0]=[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])],-1)])),_:1}),n[3]||(n[3]=a("个元素依次进栈，出栈顺序有")),s("section",null,[t(e,null,{default:p(()=>n[1]||(n[1]=[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"C"),s("mi",null,"n")]),s("mo",null,"="),s("mfrac",null,[s("mn",null,"1"),s("mrow",null,[s("mi",null,"n"),s("mo",null,"+"),s("mn",null,"1")])]),s("mrow",null,[s("mo",{fence:"true"},"("),s("mfrac",{linethickness:"0px"},[s("mrow",null,[s("mn",null,"2"),s("mi",null,"n")]),s("mi",null,"n")]),s("mo",{fence:"true"},")")])]),s("annotation",{encoding:"application/x-tex"},"C_{n}=\\frac{1}{n+1}\\binom{2n}{n}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0715em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.4em","vertical-align":"-0.95em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3214em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7693em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mord"},[s("span",{class:"mopen delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size3"},"(")]),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3214em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n")])]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal"},"n")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size3"},")")])])])])])],-1)])),_:1})])])])]),s("p",null,[n[7]||(n[7]=a("满足")),s("section",null,[t(e,null,{default:p(()=>n[6]||(n[6]=[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"C"),s("mrow",null,[s("mi",null,"n"),s("mo",null,"+"),s("mn",null,"1")])]),s("mo",null,"="),s("munderover",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"0")]),s("mi",null,"n")]),s("msub",null,[s("mi",null,"C"),s("mi",null,"i")]),s("msub",null,[s("mi",null,"C"),s("mrow",null,[s("mi",null,"n"),s("mo",null,"−"),s("mi",null,"i")])])]),s("annotation",{encoding:"application/x-tex"},"C_{n+1}=\\sum_{i = 0}^{n} C_{i}C_{n-i}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8917em","vertical-align":"-0.2083em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0715em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2083em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.9291em","vertical-align":"-1.2777em"}}),s("span",{class:"mop op-limits"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.6514em"}},[s("span",{style:{top:"-1.8723em","margin-left":"0em"}},[s("span",{class:"pstrut",style:{height:"3.05em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"0")])])]),s("span",{style:{top:"-3.05em"}},[s("span",{class:"pstrut",style:{height:"3.05em"}}),s("span",null,[s("span",{class:"mop op-symbol large-op"},"∑")])]),s("span",{style:{top:"-4.3em","margin-left":"0em"}},[s("span",{class:"pstrut",style:{height:"3.05em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.2777em"}},[s("span")])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0715em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0715em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mathnormal mtight"},"i")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2083em"}},[s("span")])])])])])])])])],-1)])),_:1})]),n[8]||(n[8]=a("为卡特兰数。"))]),n[11]||(n[11]=u(`<h3 id="_1-1-后缀表达式" tabindex="-1"><a class="header-anchor" href="#_1-1-后缀表达式"><span>1.1 后缀表达式</span></a></h3><p>中缀表达式转换为后缀表达式</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">precedence <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">infix2postfix</span><span class="token punctuation">(</span>infix<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span></span>
<span class="line">	ops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">	postfix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">for</span> c <span class="token keyword">in</span> infix<span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">if</span> c<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">			postfix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">elif</span> c <span class="token operator">==</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">:</span></span>
<span class="line">			ops<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">elif</span> c <span class="token operator">==</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">:</span></span>
<span class="line">			<span class="token keyword">while</span> ops <span class="token keyword">and</span> ops<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">:</span></span>
<span class="line">				postfix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ops<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">			ops<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">			<span class="token keyword">while</span> ops <span class="token keyword">and</span> precedence<span class="token punctuation">[</span>ops<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> precedence<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">				postfix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ops<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">			ops<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">while</span> ops<span class="token punctuation">:</span></span>
<span class="line">		postfix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ops<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>postfix<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后缀表达式计算</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">cal_postfix</span><span class="token punctuation">(</span>postfix<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span></span>
<span class="line">	stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">for</span> c <span class="token keyword">in</span> postfix<span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">if</span> c<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">			stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">			b <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">			a <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">			stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cal_op<span class="token punctuation">(</span>c<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 根据c属于什么op(+-/*)计算</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-前缀表达式" tabindex="-1"><a class="header-anchor" href="#_1-2-前缀表达式"><span>1.2 前缀表达式</span></a></h3><p>中缀表达式转换为前缀表达式，考虑反转</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">infix2prefix</span><span class="token punctuation">(</span>infix<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span></span>
<span class="line">	infix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;(&quot;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>c<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> infix<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">	ops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">	prefix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">for</span> c <span class="token keyword">in</span> infix<span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">if</span> c<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">			prefix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">elif</span> c <span class="token operator">==</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">:</span></span>
<span class="line">			ops<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">elif</span> c <span class="token operator">==</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">:</span></span>
<span class="line">			<span class="token keyword">while</span> ops <span class="token keyword">and</span> ops<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">:</span></span>
<span class="line">				prefix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ops<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">			ops<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">			<span class="token comment"># 注意反转后是右结合，因此是&gt;而不是&gt;=</span></span>
<span class="line">			<span class="token keyword">while</span> ops <span class="token keyword">and</span> precedence<span class="token punctuation">[</span>ops<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> precedence<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">				prefix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ops<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">			ops<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">while</span> ops<span class="token punctuation">:</span></span>
<span class="line">		prefix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ops<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算前缀表达式</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">cal_prefix</span><span class="token punctuation">(</span>prefix<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span></span>
<span class="line">	stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>postfix<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">if</span> c<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">			stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">			a <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">			b <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">			stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cal_op<span class="token punctuation">(</span>c<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-队列" tabindex="-1"><a class="header-anchor" href="#_2-队列"><span>2. 队列</span></a></h2><h3 id="_2-1-循环队列" tabindex="-1"><a class="header-anchor" href="#_2-1-循环队列"><span>2.1 循环队列</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">CircularQueue</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		self<span class="token punctuation">.</span>size <span class="token operator">=</span> size</span>
<span class="line">		self<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> size</span>
<span class="line">		self<span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">		self<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">return</span> self<span class="token punctuation">.</span>front <span class="token operator">==</span> self<span class="token punctuation">.</span>rear</span>
<span class="line"></span>
<span class="line">	<span class="token keyword">def</span> <span class="token function">is_full</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">return</span> self<span class="token punctuation">.</span>front <span class="token operator">==</span> self<span class="token punctuation">.</span>_next<span class="token punctuation">(</span>self<span class="token punctuation">.</span>rear<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">def</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Any<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		self<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>self<span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> item</span>
<span class="line">		self<span class="token punctuation">.</span>rear <span class="token operator">=</span> self<span class="token punctuation">.</span>_next<span class="token punctuation">(</span>self<span class="token punctuation">.</span>rear<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">def</span> <span class="token function">dequeue</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Any<span class="token punctuation">:</span></span>
<span class="line">		item <span class="token operator">=</span> self<span class="token punctuation">.</span>peek<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">		self<span class="token punctuation">.</span>front <span class="token operator">=</span> self<span class="token punctuation">.</span>_next<span class="token punctuation">(</span>self<span class="token punctuation">.</span>front<span class="token punctuation">)</span></span>
<span class="line">		<span class="token keyword">return</span> item</span>
<span class="line"></span>
<span class="line">	<span class="token keyword">def</span> <span class="token function">peek</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Any<span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">return</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">(</span>self<span class="token punctuation">.</span>front<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">def</span> <span class="token function">_next</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>size</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13))])}const g=i(k,[["render",v],["__file","01zhanyuduilie.html.vue"]]),y=JSON.parse('{"path":"/series/fuxi/shujujiegou/01zhanyuduilie.html","title":"01栈与队列","lang":"zh-CN","frontmatter":{"date":"2025-07-18T00:00:00.000Z"},"headers":[{"level":2,"title":"1. 栈","slug":"_1-栈","link":"#_1-栈","children":[{"level":3,"title":"1.1 后缀表达式","slug":"_1-1-后缀表达式","link":"#_1-1-后缀表达式","children":[]},{"level":3,"title":"1.2 前缀表达式","slug":"_1-2-前缀表达式","link":"#_1-2-前缀表达式","children":[]}]},{"level":2,"title":"2. 队列","slug":"_2-队列","link":"#_2-队列","children":[{"level":3,"title":"2.1 循环队列","slug":"_2-1-循环队列","link":"#_2-1-循环队列","children":[]}]}],"git":{"createdTime":1752906792000,"updatedTime":1752906792000,"contributors":[{"name":"Dawnfz-Lenfeng","email":"2912706234@qq.com","commits":1}]},"filePathRelative":"series/fuxi/数据结构/01栈与队列.md"}');export{g as comp,y as data};
